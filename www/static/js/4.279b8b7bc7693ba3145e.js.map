{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/shadow-css-4889ae62-23996f3f.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","scopeCss","__WEBPACK_IMPORTED_MODULE_0_tslib__","_parenSuffix","_cssColonHostRe","RegExp","_cssColonHostContextRe","_cssColonSlottedRe","_polyfillHostNoCombinatorRe","_shadowDOMSelectorsRe","_polyfillHostRe","_colonHostRe","_colonSlottedRe","_colonHostContextRe","_commentRe","_commentWithHashRe","_ruleRe","_curlyRe","processRules","input","ruleCallback","inputWithEscapedBlocks","escapeBlocks","nextBlockIndex","escapedString","replace","m","_i","arguments","length","selector","content","suffix","contentPrefix","startsWith","blocks","substring","rule","inputParts","split","resultParts","escapedBlocks","bracketCount","currentBlockParts","partIndex","part","push","join","convertColonRule","cssText","regExp","partReplacer","parts","r","i","p","trim","_polyfillHost","colonHostPartReplacer","host","colonHostContextPartReplacer","indexOf","selectorNeedsScoping","scopeSelector","makeScopeMatcher","test","applyStrictSelectorScope","hostSelector","res","className","_","_scopeSelectorPart","scopedP","lastIndex","replaceBy_1","before","colon","after","applySimpleSelectorScope","t","matches","match","safeContent","placeholders","index","keep","replaceBy","pseudo","exp","safeSelector","scopedSelector","startIndex","sep","shouldScope","exec","separator","part_1","slice","scopeSelectors","scopeSelectorText","slotSelector","commentOriginalSelector","map","shallowPart","scopeCssText","scopeId","hostScopeId","slotScopeId","reduce","result","pattern","convertShadowDOMSelectors","slotAttr","compound","convertColonSlotted","convertColonHostContext","convertColonHost","commentsWithHash","stripComments","orgSelectors","processCommentedSelector_1","placeholder","comment","scopedCssText","forEach","_a"],"mappings":"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","file":"static/js/4.279b8b7bc7693ba3145e.js","sourcesContent":["import { __spreadArrays } from \"tslib\";\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n *\n * This file is a port of shadowCSS from webcomponents.js to TypeScript.\n * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js\n * https://github.com/angular/angular/blob/master/packages/compiler/src/shadow_css.ts\n */\nvar safeSelector = function (selector) {\n    var placeholders = [];\n    var index = 0;\n    var content;\n    // Replaces attribute selectors with placeholders.\n    // The WS in [attr=\"va lue\"] would otherwise be interpreted as a selector separator.\n    selector = selector.replace(/(\\[[^\\]]*\\])/g, function (_, keep) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(keep);\n        index++;\n        return replaceBy;\n    });\n    // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.\n    // WS and \"+\" would otherwise be interpreted as selector separators.\n    content = selector.replace(/(:nth-[-\\w]+)(\\([^)]+\\))/g, function (_, pseudo, exp) {\n        var replaceBy = \"__ph-\" + index + \"__\";\n        placeholders.push(exp);\n        index++;\n        return pseudo + replaceBy;\n    });\n    var ss = {\n        content: content,\n        placeholders: placeholders,\n    };\n    return ss;\n};\nvar restoreSafeSelector = function (placeholders, content) {\n    return content.replace(/__ph-(\\d+)__/g, function (_, index) { return placeholders[+index]; });\n};\nvar _polyfillHost = '-shadowcsshost';\nvar _polyfillSlotted = '-shadowcssslotted';\n// note: :host-context pre-processed to -shadowcsshostcontext.\nvar _polyfillHostContext = '-shadowcsscontext';\nvar _parenSuffix = ')(?:\\\\((' +\n    '(?:\\\\([^)(]*\\\\)|[^)(]*)+?' +\n    ')\\\\))?([^,{]*)';\nvar _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');\nvar _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');\nvar _cssColonSlottedRe = new RegExp('(' + _polyfillSlotted + _parenSuffix, 'gim');\nvar _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';\nvar _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\\s]*)/;\nvar _shadowDOMSelectorsRe = [\n    /::shadow/g,\n    /::content/g\n];\nvar _selectorReSuffix = '([>\\\\s~+\\[.,{:][\\\\s\\\\S]*)?$';\nvar _polyfillHostRe = /-shadowcsshost/gim;\nvar _colonHostRe = /:host/gim;\nvar _colonSlottedRe = /::slotted/gim;\nvar _colonHostContextRe = /:host-context/gim;\nvar _commentRe = /\\/\\*\\s*[\\s\\S]*?\\*\\//g;\nvar stripComments = function (input) {\n    return input.replace(_commentRe, '');\n};\nvar _commentWithHashRe = /\\/\\*\\s*#\\s*source(Mapping)?URL=[\\s\\S]+?\\*\\//g;\nvar extractCommentsWithHash = function (input) {\n    return input.match(_commentWithHashRe) || [];\n};\nvar _ruleRe = /(\\s*)([^;\\{\\}]+?)(\\s*)((?:{%BLOCK%}?\\s*;?)|(?:\\s*;))/g;\nvar _curlyRe = /([{}])/g;\nvar OPEN_CURLY = '{';\nvar CLOSE_CURLY = '}';\nvar BLOCK_PLACEHOLDER = '%BLOCK%';\nvar processRules = function (input, ruleCallback) {\n    var inputWithEscapedBlocks = escapeBlocks(input);\n    var nextBlockIndex = 0;\n    return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        var selector = m[2];\n        var content = '';\n        var suffix = m[4];\n        var contentPrefix = '';\n        if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {\n            content = inputWithEscapedBlocks.blocks[nextBlockIndex++];\n            suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);\n            contentPrefix = '{';\n        }\n        var cssRule = {\n            selector: selector,\n            content: content\n        };\n        var rule = ruleCallback(cssRule);\n        return \"\" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;\n    });\n};\nvar escapeBlocks = function (input) {\n    var inputParts = input.split(_curlyRe);\n    var resultParts = [];\n    var escapedBlocks = [];\n    var bracketCount = 0;\n    var currentBlockParts = [];\n    for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {\n        var part = inputParts[partIndex];\n        if (part === CLOSE_CURLY) {\n            bracketCount--;\n        }\n        if (bracketCount > 0) {\n            currentBlockParts.push(part);\n        }\n        else {\n            if (currentBlockParts.length > 0) {\n                escapedBlocks.push(currentBlockParts.join(''));\n                resultParts.push(BLOCK_PLACEHOLDER);\n                currentBlockParts = [];\n            }\n            resultParts.push(part);\n        }\n        if (part === OPEN_CURLY) {\n            bracketCount++;\n        }\n    }\n    if (currentBlockParts.length > 0) {\n        escapedBlocks.push(currentBlockParts.join(''));\n        resultParts.push(BLOCK_PLACEHOLDER);\n    }\n    var strEscapedBlocks = {\n        escapedString: resultParts.join(''),\n        blocks: escapedBlocks\n    };\n    return strEscapedBlocks;\n};\nvar insertPolyfillHostInCssText = function (selector) {\n    selector = selector\n        .replace(_colonHostContextRe, _polyfillHostContext)\n        .replace(_colonHostRe, _polyfillHost)\n        .replace(_colonSlottedRe, _polyfillSlotted);\n    return selector;\n};\nvar convertColonRule = function (cssText, regExp, partReplacer) {\n    // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var parts = m[2].split(',');\n            var r = [];\n            for (var i = 0; i < parts.length; i++) {\n                var p = parts[i].trim();\n                if (!p)\n                    break;\n                r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));\n            }\n            return r.join(',');\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar colonHostPartReplacer = function (host, part, suffix) {\n    return host + part.replace(_polyfillHost, '') + suffix;\n};\nvar convertColonHost = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostRe, colonHostPartReplacer);\n};\nvar colonHostContextPartReplacer = function (host, part, suffix) {\n    if (part.indexOf(_polyfillHost) > -1) {\n        return colonHostPartReplacer(host, part, suffix);\n    }\n    else {\n        return host + part + suffix + ', ' + part + ' ' + host + suffix;\n    }\n};\nvar convertColonSlotted = function (cssText, slotAttr) {\n    var regExp = _cssColonSlottedRe;\n    return cssText.replace(regExp, function () {\n        var m = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            m[_i] = arguments[_i];\n        }\n        if (m[2]) {\n            var compound = m[2].trim();\n            var suffix = m[3];\n            var sel = '.' + slotAttr + ' > ' + compound + suffix;\n            return sel;\n        }\n        else {\n            return _polyfillHostNoCombinator + m[3];\n        }\n    });\n};\nvar convertColonHostContext = function (cssText) {\n    return convertColonRule(cssText, _cssColonHostContextRe, colonHostContextPartReplacer);\n};\nvar convertShadowDOMSelectors = function (cssText) {\n    return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);\n};\nvar makeScopeMatcher = function (scopeSelector) {\n    var lre = /\\[/g;\n    var rre = /\\]/g;\n    scopeSelector = scopeSelector.replace(lre, '\\\\[').replace(rre, '\\\\]');\n    return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');\n};\nvar selectorNeedsScoping = function (selector, scopeSelector) {\n    var re = makeScopeMatcher(scopeSelector);\n    return !re.test(selector);\n};\nvar applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {\n    // In Android browser, the lastIndex is not reset when the regex is used in String.replace()\n    _polyfillHostRe.lastIndex = 0;\n    if (_polyfillHostRe.test(selector)) {\n        var replaceBy_1 = \".\" + hostSelector;\n        return selector\n            .replace(_polyfillHostNoCombinatorRe, function (_, selector) {\n            return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {\n                return before + replaceBy_1 + colon + after;\n            });\n        })\n            .replace(_polyfillHostRe, replaceBy_1 + ' ');\n    }\n    return scopeSelector + ' ' + selector;\n};\nvar applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {\n    var isRe = /\\[is=([^\\]]*)\\]/g;\n    scopeSelector = scopeSelector.replace(isRe, function (_) {\n        var parts = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            parts[_i - 1] = arguments[_i];\n        }\n        return parts[0];\n    });\n    var className = '.' + scopeSelector;\n    var _scopeSelectorPart = function (p) {\n        var scopedP = p.trim();\n        if (!scopedP) {\n            return '';\n        }\n        if (p.indexOf(_polyfillHostNoCombinator) > -1) {\n            scopedP = applySimpleSelectorScope(p, scopeSelector, hostSelector);\n        }\n        else {\n            // remove :host since it should be unnecessary\n            var t = p.replace(_polyfillHostRe, '');\n            if (t.length > 0) {\n                var matches = t.match(/([^:]*)(:*)(.*)/);\n                if (matches) {\n                    scopedP = matches[1] + className + matches[2] + matches[3];\n                }\n            }\n        }\n        return scopedP;\n    };\n    var safeContent = safeSelector(selector);\n    selector = safeContent.content;\n    var scopedSelector = '';\n    var startIndex = 0;\n    var res;\n    var sep = /( |>|\\+|~(?!=))\\s*/g;\n    // If a selector appears before :host it should not be shimmed as it\n    // matches on ancestor elements and not on elements in the host's shadow\n    // `:host-context(div)` is transformed to\n    // `-shadowcsshost-no-combinatordiv, div -shadowcsshost-no-combinator`\n    // the `div` is not part of the component in the 2nd selectors and should not be scoped.\n    // Historically `component-tag:host` was matching the component so we also want to preserve\n    // this behavior to avoid breaking legacy apps (it should not match).\n    // The behavior should be:\n    // - `tag:host` -> `tag[h]` (this is to avoid breaking legacy apps, should not match anything)\n    // - `tag :host` -> `tag [h]` (`tag` is not scoped because it's considered part of a\n    //   `:host-context(tag)`)\n    var hasHost = selector.indexOf(_polyfillHostNoCombinator) > -1;\n    // Only scope parts after the first `-shadowcsshost-no-combinator` when it is present\n    var shouldScope = !hasHost;\n    while ((res = sep.exec(selector)) !== null) {\n        var separator = res[1];\n        var part_1 = selector.slice(startIndex, res.index).trim();\n        shouldScope = shouldScope || part_1.indexOf(_polyfillHostNoCombinator) > -1;\n        var scopedPart = shouldScope ? _scopeSelectorPart(part_1) : part_1;\n        scopedSelector += scopedPart + \" \" + separator + \" \";\n        startIndex = sep.lastIndex;\n    }\n    var part = selector.substring(startIndex);\n    shouldScope = shouldScope || part.indexOf(_polyfillHostNoCombinator) > -1;\n    scopedSelector += shouldScope ? _scopeSelectorPart(part) : part;\n    // replace the placeholders with their original values\n    return restoreSafeSelector(safeContent.placeholders, scopedSelector);\n};\nvar scopeSelector = function (selector, scopeSelectorText, hostSelector, slotSelector) {\n    return selector.split(',')\n        .map(function (shallowPart) {\n        if (slotSelector && shallowPart.indexOf('.' + slotSelector) > -1) {\n            return shallowPart.trim();\n        }\n        if (selectorNeedsScoping(shallowPart, scopeSelectorText)) {\n            return applyStrictSelectorScope(shallowPart, scopeSelectorText, hostSelector).trim();\n        }\n        else {\n            return shallowPart.trim();\n        }\n    })\n        .join(', ');\n};\nvar scopeSelectors = function (cssText, scopeSelectorText, hostSelector, slotSelector, commentOriginalSelector) {\n    return processRules(cssText, function (rule) {\n        var selector = rule.selector;\n        var content = rule.content;\n        if (rule.selector[0] !== '@') {\n            selector = scopeSelector(rule.selector, scopeSelectorText, hostSelector, slotSelector);\n        }\n        else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n            rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n            content = scopeSelectors(rule.content, scopeSelectorText, hostSelector, slotSelector);\n        }\n        var cssRule = {\n            selector: selector.replace(/\\s{2,}/g, ' ').trim(),\n            content: content\n        };\n        return cssRule;\n    });\n};\nvar scopeCssText = function (cssText, scopeId, hostScopeId, slotScopeId, commentOriginalSelector) {\n    cssText = insertPolyfillHostInCssText(cssText);\n    cssText = convertColonHost(cssText);\n    cssText = convertColonHostContext(cssText);\n    cssText = convertColonSlotted(cssText, slotScopeId);\n    cssText = convertShadowDOMSelectors(cssText);\n    if (scopeId) {\n        cssText = scopeSelectors(cssText, scopeId, hostScopeId, slotScopeId);\n    }\n    cssText = cssText.replace(/-shadowcsshost-no-combinator/g, \".\" + hostScopeId);\n    cssText = cssText.replace(/>\\s*\\*\\s+([^{, ]+)/gm, ' $1 ');\n    return cssText.trim();\n};\nvar scopeCss = function (cssText, scopeId, commentOriginalSelector) {\n    var hostScopeId = scopeId + '-h';\n    var slotScopeId = scopeId + '-s';\n    var commentsWithHash = extractCommentsWithHash(cssText);\n    cssText = stripComments(cssText);\n    var orgSelectors = [];\n    if (commentOriginalSelector) {\n        var processCommentedSelector_1 = function (rule) {\n            var placeholder = \"/*!@___\" + orgSelectors.length + \"___*/\";\n            var comment = \"/*!@\" + rule.selector + \"*/\";\n            orgSelectors.push({ placeholder: placeholder, comment: comment });\n            rule.selector = placeholder + rule.selector;\n            return rule;\n        };\n        cssText = processRules(cssText, function (rule) {\n            if (rule.selector[0] !== '@') {\n                return processCommentedSelector_1(rule);\n            }\n            else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||\n                rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {\n                rule.content = processRules(rule.content, processCommentedSelector_1);\n                return rule;\n            }\n            return rule;\n        });\n    }\n    var scopedCssText = scopeCssText(cssText, scopeId, hostScopeId, slotScopeId);\n    cssText = __spreadArrays([scopedCssText], commentsWithHash).join('\\n');\n    if (commentOriginalSelector) {\n        orgSelectors.forEach(function (_a) {\n            var placeholder = _a.placeholder, comment = _a.comment;\n            cssText = cssText.replace(placeholder, comment);\n        });\n    }\n    return cssText;\n};\nexport { scopeCss };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/core/dist/esm-es5/shadow-css-4889ae62-23996f3f.js\n// module id = 6Ktv\n// module chunks = 4"],"sourceRoot":""}