{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/input-shims-a4fc53ac.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","startInputShims","__WEBPACK_IMPORTED_MODULE_0__helpers_46f4a262_js__","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","jsSetFocus","contentEl","scrollData","itemEl","closest","getBoundingClientRect","defaultView","innerHeight","getScrollData","focus","scrollByPoint","then","hasPointerMoved","threshold","startCoord","endCoord","deltaX","x","deltaY","y","setScrollPadding","tagName","parentElement","el","timer","clearTimeout","setProperty","setTimeout","config","doc","document","getNumber","scrollAssist","getBoolean","hideCaret","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","shadowRoot","querySelector","scrollEl","rmFn","scrollHideCaret","shouldHideCaret","onBlur","showCaret","addEventListener","removeEventListener","enableHideCaretOnScroll","coord","touchStart","ev","touchEnd","preventDefault","stopPropagation","enableScrollAssist","focused","didScroll","onScroll","onFocusin","onTouchend","active","matches","tapped","target","blur","enableInputBlurring","onFocusout","enableScrollPadding","_i","inputs_1","length","detail","fn","unregisterInput"],"mappings":"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","file":"static/js/91.8a6c321ab53852592381.js","sourcesContent":["import { p as pointerCoord } from './helpers-46f4a262.js';\nvar cloneMap = new WeakMap();\nvar relocateInput = function (componentEl, inputEl, shouldRelocate, inputRelativeY) {\n    if (inputRelativeY === void 0) { inputRelativeY = 0; }\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nvar isFocused = function (input) {\n    return input === input.getRootNode().activeElement;\n};\nvar addClone = function (componentEl, inputEl, inputRelativeY) {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    var parentEl = inputEl.parentNode;\n    // DOM WRITES\n    var clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    var doc = componentEl.ownerDocument;\n    var tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = \"translate3d(\" + tx + \"px,\" + inputRelativeY + \"px,0) scale(0)\";\n};\nvar removeClone = function (componentEl, inputEl) {\n    var clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\nvar enableHideCaretOnScroll = function (componentEl, inputEl, scrollEl) {\n    if (!scrollEl || !inputEl) {\n        return function () { return; };\n    }\n    var scrollHideCaret = function (shouldHideCaret) {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    var onBlur = function () { return relocateInput(componentEl, inputEl, false); };\n    var hideCaret = function () { return scrollHideCaret(true); };\n    var showCaret = function () { return scrollHideCaret(false); };\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return function () {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n};\nvar SKIP_SELECTOR = 'input, textarea, [no-blur]';\nvar enableInputBlurring = function () {\n    var focused = true;\n    var didScroll = false;\n    var doc = document;\n    var onScroll = function () {\n        didScroll = true;\n    };\n    var onFocusin = function () {\n        focused = true;\n    };\n    var onTouchend = function (ev) {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        var active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        var tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO: find a better way, why 50ms?\n        setTimeout(function () {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return function () {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\nvar SCROLL_ASSIST_SPEED = 0.3;\nvar getScrollData = function (componentEl, contentEl, keyboardHeight) {\n    var itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nvar calcScrollData = function (inputRect, contentRect, keyboardHeight, platformHeight) {\n    // compute input's Y values relative to the body\n    var inputTop = inputRect.top;\n    var inputBottom = inputRect.bottom;\n    // compute visible area\n    var visibleAreaTop = contentRect.top;\n    var visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    var safeAreaTop = visibleAreaTop + 15;\n    var safeAreaBottom = visibleAreaBottom * 0.5;\n    // figure out if each edge of the input is within the safe area\n    var distanceToBottom = safeAreaBottom - inputBottom;\n    var distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    var desiredScrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    var scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    var distance = Math.abs(scrollAmount);\n    var duration = distance / SCROLL_ASSIST_SPEED;\n    var scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount: scrollAmount,\n        scrollDuration: scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n};\nvar enableScrollAssist = function (componentEl, inputEl, contentEl, keyboardHeight) {\n    var coord;\n    var touchStart = function (ev) {\n        coord = pointerCoord(ev);\n    };\n    var touchEnd = function (ev) {\n        // input cover touchend/mouseup\n        if (!coord) {\n            return;\n        }\n        // get where the touchend/mouseup ended\n        var endCoord = pointerCoord(ev);\n        // focus this input if the pointer hasn't moved XX pixels\n        // and the input doesn't already have focus\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // begin the input focus process\n            jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return function () {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n};\nvar jsSetFocus = function (componentEl, inputEl, contentEl, keyboardHeight) {\n    var scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n    if (Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        inputEl.focus();\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    // scroll the input into place\n    contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration).then(function () {\n        // the scroll view is in the correct position now\n        // give the native text input focus\n        relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n        // ensure this is the focused input\n        inputEl.focus();\n    });\n};\nvar hasPointerMoved = function (threshold, startCoord, endCoord) {\n    if (startCoord && endCoord) {\n        var deltaX = (startCoord.x - endCoord.x);\n        var deltaY = (startCoord.y - endCoord.y);\n        var distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n};\nvar PADDING_TIMER_KEY = '$ionPaddingTimer';\nvar enableScrollPadding = function (keyboardHeight) {\n    var doc = document;\n    var onFocusin = function (ev) {\n        setScrollPadding(ev.target, keyboardHeight);\n    };\n    var onFocusout = function (ev) {\n        setScrollPadding(ev.target, 0);\n    };\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return function () {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n};\nvar setScrollPadding = function (input, keyboardHeight) {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    if (input.parentElement &&\n        input.parentElement.parentElement &&\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n        return;\n    }\n    var el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    var timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', keyboardHeight + \"px\");\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(function () {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n};\nvar INPUT_BLURRING = true;\nvar SCROLL_PADDING = true;\nvar startInputShims = function (config) {\n    var doc = document;\n    var keyboardHeight = config.getNumber('keyboardHeight', 290);\n    var scrollAssist = config.getBoolean('scrollAssist', true);\n    var hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    var inputBlurring = config.getBoolean('inputBlurring', true);\n    var scrollPadding = config.getBoolean('scrollPadding', true);\n    var inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    var hideCaretMap = new WeakMap();\n    var scrollAssistMap = new WeakMap();\n    var registerInput = function (componentEl) {\n        var inputEl = (componentEl.shadowRoot || componentEl).querySelector('input') || (componentEl.shadowRoot || componentEl).querySelector('textarea');\n        var scrollEl = componentEl.closest('ion-content');\n        if (!inputEl) {\n            return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            var rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if (!!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            var rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    var unregisterInput = function (componentEl) {\n        if (hideCaret) {\n            var fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if (scrollAssist) {\n            var fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(keyboardHeight);\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (var _i = 0, inputs_1 = inputs; _i < inputs_1.length; _i++) {\n        var input = inputs_1[_i];\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', (function (ev) {\n        registerInput(ev.detail);\n    }));\n    doc.addEventListener('ionInputDidUnload', (function (ev) {\n        unregisterInput(ev.detail);\n    }));\n};\nexport { startInputShims };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/core/dist/esm-es5/input-shims-a4fc53ac.js\n// module id = 2WBb\n// module chunks = 91"],"sourceRoot":""}