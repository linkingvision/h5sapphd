{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2-ios.entry.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","InfiniteScroll","InfiniteScrollContent","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__core_ca0488fc_js__","__WEBPACK_IMPORTED_MODULE_2__config_3c7f3790_js__","__WEBPACK_IMPORTED_MODULE_3__index_3476b023_js__","class_1","hostRef","_this","this","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","ionInfinite","emit","prototype","thresholdChanged","val","lastIndexOf","parseFloat","disabledChanged","enableScrollEvents","connectedCallback","contentEl","_a","_b","label","closest","getScrollElement","console","error","sent","clientHeight","disconnectedCallback","undefined","complete","prev_1","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","render","mode","class","get","enumerable","configurable","componentDidLoad","loadingSpinner","name","loadingText","innerHTML"],"mappings":"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","file":"static/js/55.bc7d2daa0402ee161438.js","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as createEvent, w as writeTask, f as readTask, d as getIonMode, h, e as getElement, H as Host } from './core-ca0488fc.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { s as sanitizeDOMString } from './index-3476b023.js';\nvar InfiniteScroll = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = function () {\n            var scrollEl = _this.scrollEl;\n            if (!scrollEl || !_this.canStart()) {\n                return 1;\n            }\n            var infiniteHeight = _this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            var scrollTop = scrollEl.scrollTop;\n            var scrollHeight = scrollEl.scrollHeight;\n            var height = scrollEl.offsetHeight;\n            var threshold = _this.thrPc !== 0 ? (height * _this.thrPc) : _this.thrPx;\n            var distanceFromInfinite = (_this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!_this.didFire) {\n                    _this.isLoading = true;\n                    _this.didFire = true;\n                    _this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                _this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    class_1.prototype.thresholdChanged = function () {\n        var val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    };\n    class_1.prototype.disabledChanged = function () {\n        var disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    };\n    class_1.prototype.connectedCallback = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var contentEl, _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) {\n                            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n                            return [2 /*return*/];\n                        }\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 1:\n                        _a.scrollEl = _b.sent();\n                        this.thresholdChanged();\n                        this.disabledChanged();\n                        if (this.position === 'top') {\n                            writeTask(function () {\n                                if (_this.scrollEl) {\n                                    _this.scrollEl.scrollTop = _this.scrollEl.scrollHeight - _this.scrollEl.clientHeight;\n                                }\n                            });\n                        }\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.disconnectedCallback = function () {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    };\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    class_1.prototype.complete = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var scrollEl, prev_1;\n            var _this = this;\n            return __generator(this, function (_a) {\n                scrollEl = this.scrollEl;\n                if (!this.isLoading || !scrollEl) {\n                    return [2 /*return*/];\n                }\n                this.isLoading = false;\n                if (this.position === 'top') {\n                    /**\n                     * New content is being added at the top, but the scrollTop position stays the same,\n                     * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n                     * (Frame 1)\n                     *    - complete() is called, but the UI hasn't had time to update yet.\n                     *    - Save the current content dimensions.\n                     *    - Wait for the next frame using _dom.read, so the UI will be updated.\n                     * (Frame 2)\n                     *    - Read the new content dimensions.\n                     *    - Calculate the height difference and the new scroll position.\n                     *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n                     * (Still frame 2, if I'm correct)\n                     *    - Change the scroll position (= visually maintain the scroll position).\n                     *    - Change the state to re-enable the InfiniteScroll.\n                     *    - This should be after changing the scroll position, or it could\n                     *    cause the InfiniteScroll to be triggered again immediately.\n                     * (Frame 3)\n                     *    Done.\n                     */\n                    this.isBusy = true;\n                    prev_1 = scrollEl.scrollHeight - scrollEl.scrollTop;\n                    // ******** DOM READ ****************\n                    requestAnimationFrame(function () {\n                        readTask(function () {\n                            // UI has updated, save the new content dimensions\n                            var scrollHeight = scrollEl.scrollHeight;\n                            // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                            var newScrollTop = scrollHeight - prev_1;\n                            // ******** DOM WRITE ****************\n                            requestAnimationFrame(function () {\n                                writeTask(function () {\n                                    scrollEl.scrollTop = newScrollTop;\n                                    _this.isBusy = false;\n                                });\n                            });\n                        });\n                    });\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    class_1.prototype.canStart = function () {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    };\n    class_1.prototype.enableScrollEvents = function (shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    };\n    class_1.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        var disabled = this.disabled;\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                _a['infinite-scroll-loading'] = this.isLoading,\n                _a['infinite-scroll-enabled'] = !disabled,\n                _a) }));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"watchers\", {\n        get: function () {\n            return {\n                \"threshold\": [\"thresholdChanged\"],\n                \"disabled\": [\"disabledChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"style\", {\n        get: function () { return \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return class_1;\n}());\nvar InfiniteScrollContent = /** @class */ (function () {\n    function InfiniteScrollContent(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    InfiniteScrollContent.prototype.componentDidLoad = function () {\n        if (this.loadingSpinner === undefined) {\n            var mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    };\n    InfiniteScrollContent.prototype.render = function () {\n        var _a;\n        var mode = getIonMode(this);\n        return (h(Host, { class: (_a = {},\n                _a[mode] = true,\n                // Used internally for styling\n                _a[\"infinite-scroll-content-\" + mode] = true,\n                _a) }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    };\n    Object.defineProperty(InfiniteScrollContent, \"style\", {\n        get: function () { return \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line{stroke:var(--ion-color-step-600,#666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600,#666)}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return InfiniteScrollContent;\n}());\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2-ios.entry.js\n// module id = wmF1\n// module chunks = 55"],"sourceRoot":""}