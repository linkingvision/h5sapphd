{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/ion-nav_5.entry.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","Nav","NavLink","NavPop","NavPush","NavSetRoot","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__core_ca0488fc_js__","__WEBPACK_IMPORTED_MODULE_2__config_3c7f3790_js__","__WEBPACK_IMPORTED_MODULE_3__helpers_46f4a262_js__","__WEBPACK_IMPORTED_MODULE_4__constants_3c3e1099_js__","__WEBPACK_IMPORTED_MODULE_5__framework_delegate_c2e2e1f4_js__","__WEBPACK_IMPORTED_MODULE_6__index_6826f2f6_js__","__WEBPACK_IMPORTED_MODULE_7__cubic_bezier_2812fda3_js__","VIEW_STATE_NEW","ViewController","component","params","this","state","prototype","init","container","_a","_b","label","element","delegate","sent","_destroy","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","keys","keysB","length","_i","keysA_1","key","convertToView","page","class_1","hostRef","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","ionNavWillChange","ionNavDidChange","swipeGestureChanged","gesture","setDisabled","swipeGesture","rootChanged","root","setRoot","rootParams","componentWillLoad","document","querySelector","el","closest","mode","getBoolean","emit","componentDidLoad","e","then","bind","createSwipeBackGesture","canStart","onStart","onMove","onEnd","componentDidUnload","destroy","push","componentProps","opts","done","queueTrns","insertStart","insertViews","insert","insertIndex","insertPages","insertComponents","pop","removeStart","removeCount","popTo","indexOrViewCtrl","tiConfig","removeView","popToRoot","removeIndex","startIndex","setPages","setRouteId","direction","resolve","_this","active","getActiveSync","Promise","changed","finish","promise","r","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","viewController","find","v","assign","getRouteId","tagName","getActive","getByIndex","index","canGoBack","canGoBackSync","getPrevious","getPreviousSync","getLength","indexOf","ti","skipIfBusy","reject","nextTrns","success","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","failed","rejectReason","shift","runTransition","rejectReason_1","trys","prepareTI","getEnteringView","Error","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","viewsLength","viewControllers","map","filter","viewControllers_1","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViews_1","insertViewAt","destroyQueue_1","destroyQueue_2","destroyView","progressCallback","leavingEl","animationOpts","progressAnimation","ani","sbAni","showGoBack","baseEl","animationBuilder","animation","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","easing","progressEnd","render","enumerable","configurable","navLink","routerDirection","onClick"],"mappings":"uDAAAA,OAAAC,eAAAC,EAAA,cAAAC,OAAA,IAAAC,EAAAC,EAAAH,EAAA,4BAAAI,IAAAF,EAAAC,EAAAH,EAAA,iCAAAK,IAAAH,EAAAC,EAAAH,EAAA,gCAAAM,IAAAJ,EAAAC,EAAAH,EAAA,iCAAAO,IAAAL,EAAAC,EAAAH,EAAA,qCAAAQ,IAAA,IAAAC,EAAAP,EAAA,QAAAQ,EAAAR,EAAA,QAAAS,EAAAT,EAAA,QAAAU,EAAAV,EAAA,QAAAW,EAAAX,EAAA,QAAAY,EAAAZ,EAAA,QAAAa,EAAAb,EAAA,QAAAc,EAAAd,EAAA,QAQAe,EAAA,EAGAC,EAAA,WACA,SAAAA,EAAAC,EAAAC,GACAC,KAAAF,YACAE,KAAAD,SACAC,KAAAC,MAAAL,EAsCA,OApCAC,EAAAK,UAAAC,KAAA,SAAAC,GACA,OAAe3B,OAAAW,EAAA,EAAAX,CAASuB,UAAA,oBACxB,IAAAF,EAAAO,EACA,OAAmB5B,OAAAW,EAAA,EAAAX,CAAWuB,KAAA,SAAAM,GAC9B,OAAAA,EAAAC,OACA,OAEA,OADAP,KAAAC,MAdA,EAeAD,KAAAQ,SAAA,MACAV,EAAAE,KAAAF,UACAO,EAAAL,MACA,EAA6CvB,OAAAgB,EAAA,EAAAhB,CAAeuB,KAAAS,SAAAL,EAAAN,GAAA,iCAAAE,KAAAD,UAC5D,OACAM,EAAAG,QAAAF,EAAAI,OACAJ,EAAAC,MAAA,EACA,uBAQAV,EAAAK,UAAAS,SAAA,WACQlC,OAAAc,EAAA,EAAAd,CA9BR,IA8BcuB,KAAAC,MAAA,+BACd,IAAAO,EAAAR,KAAAQ,QACAA,IACAR,KAAAS,SACAT,KAAAS,SAAAG,kBAAAJ,EAAAK,cAAAL,GAGAA,EAAAM,UAGAd,KAAAe,SAAAC,EACAhB,KAAAC,MAzCA,GA2CAJ,EA1CA,GA4CAoB,EAAA,SAAAC,EAAAC,EAAApB,GACA,IAAAmB,EACA,SAEA,GAAAA,EAAApB,YAAAqB,EACA,SAEA,IAAAC,EAAAF,EAAAnB,OACA,GAAAqB,IAAArB,EACA,SAEA,IAAAqB,IAAArB,EACA,SAEA,IAAAqB,IAAArB,EACA,SAEA,IAAAsB,EAAA5C,OAAA6C,KAAAF,GACAG,EAAA9C,OAAA6C,KAAAvB,GACA,GAAAsB,EAAAG,SAAAD,EAAAC,OACA,SAGA,QAAAC,EAAA,EAAAC,EAAAL,EAAqCI,EAAAC,EAAAF,OAAqBC,IAAA,CAC1D,IAAAE,EAAAD,EAAAD,GACA,GAAAL,EAAAO,KAAA5B,EAAA4B,GACA,SAGA,UAEAC,EAAA,SAAAC,EAAA9B,GACA,OAAA8B,EAGAA,aAAAhC,EACAgC,EAEA,IAAAhC,EAAAgC,EAAA9B,GALA,MAkBAhB,EAAA,WACA,SAAA+C,EAAAC,GACQtD,OAAAY,EAAA,EAAAZ,CAAgBuB,KAAA+B,GACxB/B,KAAAgC,cACAhC,KAAAiC,kBAAA,EACAjC,KAAAkC,WAAA,EACAlC,KAAAmC,iBAAA,EACAnC,KAAAoC,WAAA,EACApC,KAAAqC,SAIArC,KAAAsC,UAAA,EACAtC,KAAAuC,eAA8B9D,OAAAY,EAAA,EAAAZ,CAAWuB,KAAA,oBACzCA,KAAAwC,iBAAgC/D,OAAAY,EAAA,EAAAZ,CAAWuB,KAAA,sBAC3CA,KAAAyC,gBAA+BhE,OAAAY,EAAA,EAAAZ,CAAWuB,KAAA,qBAswB1C,OApwBA8B,EAAA5B,UAAAwC,oBAAA,WACA1C,KAAA2C,SACA3C,KAAA2C,QAAAC,aAAA,IAAA5C,KAAA6C,eAGAf,EAAA5B,UAAA4C,YAAA,gBACA9B,IAAAhB,KAAA+C,OACA/C,KAAAkC,WACAlC,KAAAgD,QAAAhD,KAAA+C,KAAA/C,KAAAiD,cAIAnB,EAAA5B,UAAAgD,kBAAA,WAIA,GAHAlD,KAAAkC,YACAiB,SAAAC,cAAA,gBACApD,KAAAqD,GAAAC,QAAA,oBACAtC,IAAAhB,KAAA6C,aAAA,CACA,IAAAU,EAAuB9E,OAAAY,EAAA,EAAAZ,CAAUuB,MACjCA,KAAA6C,aAAgCvD,EAAA,EAAMkE,WAAA,2BAAAD,GAEtCvD,KAAAuC,eAAAkB,QAEA3B,EAAA5B,UAAAwD,iBAAA,WACA,OAAejF,OAAAW,EAAA,EAAAX,CAASuB,UAAA,oBACxB,IAAAK,EACA,OAAmB5B,OAAAW,EAAA,EAAAX,CAAWuB,KAAA,SAAAM,GAC9B,OAAAA,EAAAC,OACA,OAGA,OAFAP,KAAA8C,cACAzC,EAAAL,MACA,EAA6CnB,EAAA8E,EAAA,IAAAC,KAAA/E,EAAAgF,KAAA,eAC7C,OAGA,OAFAxD,EAAAsC,QAAArC,EAAAI,OAAAoD,uBAAA9D,KAAAqD,GAAArD,KAAA+D,SAAAF,KAAA7D,WAAAgE,QAAAH,KAAA7D,WAAAiE,OAAAJ,KAAA7D,WAAAkE,MAAAL,KAAA7D,OACAA,KAAA0C,uBACA,SAKAZ,EAAA5B,UAAAiE,mBAAA,WACA,QAAA1C,EAAA,EAAApB,EAAAL,KAAAqC,MAAyCZ,EAAApB,EAAAmB,OAAgBC,IAAA,CACzD,IAAAP,EAAAb,EAAAoB,GACYhD,OAAAiB,EAAA,EAAAjB,CAASyC,EAAAV,QAAehB,EAAA,GACpC0B,EAAAP,WAEAX,KAAA2C,UACA3C,KAAA2C,QAAAyB,UACApE,KAAA2C,aAAA3B,GAGAhB,KAAAgC,WAAAR,OAAAxB,KAAAqC,MAAAb,OAAA,EACAxB,KAAAoC,WAAA,GAYAN,EAAA5B,UAAAmE,KAAA,SAAAvE,EAAAwE,EAAAC,EAAAC,GACA,OAAAxE,KAAAyE,WACAC,aAAA,EACAC,cAA2B9C,KAAA/B,EAAAC,OAAAuE,IAC3BC,QACSC,IAYT1C,EAAA5B,UAAA0E,OAAA,SAAAC,EAAA/E,EAAAwE,EAAAC,EAAAC,GACA,OAAAxE,KAAAyE,WACAC,YAAAG,EACAF,cAA2B9C,KAAA/B,EAAAC,OAAAuE,IAC3BC,QACSC,IAYT1C,EAAA5B,UAAA4E,YAAA,SAAAD,EAAAE,EAAAR,EAAAC,GACA,OAAAxE,KAAAyE,WACAC,YAAAG,EACAF,YAAAI,EACAR,QACSC,IAST1C,EAAA5B,UAAA8E,IAAA,SAAAT,EAAAC,GACA,OAAAxE,KAAAyE,WACAQ,aAAA,EACAC,YAAA,EACAX,QACSC,IAST1C,EAAA5B,UAAAiF,MAAA,SAAAC,EAAAb,EAAAC,GACA,IAAAa,GACAJ,aAAA,EACAC,aAAA,EACAX,QASA,MAPA,iBAAAa,KAAAtF,WACAuF,EAAAC,WAAAF,EACAC,EAAAJ,YAAA,GAEA,iBAAAG,IACAC,EAAAJ,YAAAG,EAAA,GAEApF,KAAAyE,UAAAY,EAAAb,IAQA1C,EAAA5B,UAAAqF,UAAA,SAAAhB,EAAAC,GACA,OAAAxE,KAAAyE,WACAQ,YAAA,EACAC,aAAA,EACAX,QACSC,IAUT1C,EAAA5B,UAAAsF,YAAA,SAAAC,EAAAP,EAAAX,EAAAC,GAEA,YADA,IAAAU,IAAqCA,EAAA,GACrClF,KAAAyE,WACAQ,YAAAQ,EACAP,cACAX,QACSC,IAUT1C,EAAA5B,UAAA8C,QAAA,SAAAlD,EAAAwE,EAAAC,EAAAC,GACA,OAAAxE,KAAA0F,WAA+B7D,KAAA/B,EAAAC,OAAAuE,IAA0CC,EAAAC,IAYzE1C,EAAA5B,UAAAwF,SAAA,SAAArD,EAAAkC,EAAAC,GAQA,OAPA,MAAAD,IACAA,OAGA,IAAAA,EAAAjC,WACAiC,EAAAjC,UAAA,GAEAtC,KAAAyE,WACAC,YAAA,EACAC,YAAAtC,EACA4C,YAAA,EACAC,aAAA,EACAX,QACSC,IAGT1C,EAAA5B,UAAAyF,WAAA,SAAAxE,EAAApB,EAAA6F,GACA,IAQAC,EARAC,EAAA9F,KACA+F,EAAA/F,KAAAgG,gBACA,GAAA/E,EAAA8E,EAAA5E,EAAApB,GACA,OAAAkG,QAAAJ,SACAK,SAAA,EACA1F,QAAAuF,EAAAvF,UAIA,IACA2F,EADAC,EAAA,IAAAH,QAAA,SAAAI,GAAgD,OAAAR,EAAAQ,IAEhDC,GACAC,WAAA,EACAC,YAAA,SAAAC,GACA,IAAAC,EACAC,EAAA,IAAAV,QAAA,SAAAI,GAAkD,OAAAK,EAAAL,IAiBlD,OAhBAR,GACAK,SAAA,EACA1F,QAAAiG,EACAG,YAAA,WAA8C,OAAQnI,OAAAW,EAAA,EAAAX,CAASqH,OAAA,oBAC/D,OAA+BrH,OAAAW,EAAA,EAAAX,CAAWuB,KAAA,SAAAK,GAC1C,OAAAA,EAAAE,OACA,OAEA,OADAmG,KACA,EAAAP,GACA,OAEA,OADA9F,EAAAK,QACA,WAKAiG,IAGA,YAAAf,EACAO,EAAAnG,KAAAgD,QAAA7B,EAAApB,EAAAuG,OAEA,CACA,IAAAO,EAAA7G,KAAAqC,MAAAyE,KAAA,SAAAC,GAA+D,OAAA9F,EAAA8F,EAAA5F,EAAApB,KAC/D8G,EACAV,EAAAnG,KAAAmF,MAAA0B,EAAApI,OAAAuI,OAAAvI,OAAAuI,UAAkFV,IAAgBV,UAAA,UAElG,YAAAA,EACAO,EAAAnG,KAAAqE,KAAAlD,EAAApB,EAAAuG,GAEA,SAAAV,IACAO,EAAAnG,KAAAgD,QAAA7B,EAAApB,EAAAtB,OAAAuI,OAAAvI,OAAAuI,UAAgFV,IAAgBV,UAAA,OAAAtD,UAAA,MAGhG,OAAA8D,GAGAtE,EAAA5B,UAAA+G,WAAA,WACA,OAAexI,OAAAW,EAAA,EAAAX,CAASuB,UAAA,oBACxB,IAAA+F,EACA,OAAmBtH,OAAAW,EAAA,EAAAX,CAAWuB,KAAA,SAAAK,GAE9B,UADA0F,EAAA/F,KAAAgG,kBAGA7E,GAAA4E,EAAAvF,QAAA0G,QACAnH,OAAAgG,EAAAhG,OACAS,QAAAuF,EAAAvF,cAEAQ,QAOAc,EAAA5B,UAAAiH,UAAA,WACA,OAAAlB,QAAAJ,QAAA7F,KAAAgG,kBAOAlE,EAAA5B,UAAAkH,WAAA,SAAAC,GACA,OAAApB,QAAAJ,QAAA7F,KAAAqC,MAAAgF,KAOAvF,EAAA5B,UAAAoH,UAAA,SAAApG,GACA,OAAA+E,QAAAJ,QAAA7F,KAAAuH,cAAArG,KAOAY,EAAA5B,UAAAsH,YAAA,SAAAtG,GACA,OAAA+E,QAAAJ,QAAA7F,KAAAyH,gBAAAvG,KAEAY,EAAA5B,UAAAwH,UAAA,WACA,OAAA1H,KAAAqC,MAAAb,QAEAM,EAAA5B,UAAA8F,cAAA,WACA,OAAAhG,KAAAqC,MAAArC,KAAAqC,MAAAb,OAAA,IAEAM,EAAA5B,UAAAqH,cAAA,SAAArG,GAEA,YADA,IAAAA,IAA8BA,EAAAlB,KAAAgG,oBAC9B9E,IAAAlB,KAAAyH,gBAAAvG,KAEAY,EAAA5B,UAAAuH,gBAAA,SAAAvG,GAEA,QADA,IAAAA,IAA8BA,EAAAlB,KAAAgG,iBAC9B9E,EAAA,CAGA,IAAAmB,EAAArC,KAAAqC,MACAgF,EAAAhF,EAAAsF,QAAAzG,GACA,OAAAmG,EAAA,EAAAhF,EAAAgF,EAAA,QAAArG,IAYAc,EAAA5B,UAAAuE,UAAA,SAAAmD,EAAApD,GACA,GAAAxE,KAAAmC,iBAAA,MAAAyF,EAAArD,MAAAqD,EAAArD,KAAAsD,WACA,OAAA5B,QAAAJ,SAAA,GAEA,IAAAO,EAAA,IAAAH,QAAA,SAAAJ,EAAAiC,GACAF,EAAA/B,UACA+B,EAAAE,WAYA,OAVAF,EAAApD,OAEAoD,EAAAjD,aAAA,IAAAiD,EAAAjD,YAAAnD,SACAoG,EAAAjD,iBAAA3D,GAGAhB,KAAAgC,WAAAqC,KAAAuD,GAGA5H,KAAA+H,WACA3B,GAEAtE,EAAA5B,UAAA8H,QAAA,SAAAC,EAAAL,GACA,GAAA5H,KAAAoC,UACApC,KAAAkI,UAAA,+BAAAN,QAOA,GAJAA,EAAApD,MACAoD,EAAApD,KAAAyD,EAAAE,aAAAF,EAAAG,mBAAAH,EAAAI,aAAAJ,EAAAK,YAAAL,EAAArC,WAEAgC,EAAA/B,QAAAoC,EAAAE,eACA,IAAAP,EAAArD,KAAAgC,WAAAvG,KAAAkC,UAAA,CACA,IAAAqG,EAAApF,SAAAC,cAAA,cACA,GAAAmF,EAAA,CACA,IAAA3C,EAAA,SAAAqC,EAAArC,UAAA,iBACA2C,EAAAC,WAAA5C,MAIA9D,EAAA5B,UAAAuI,OAAA,SAAAC,EAAAd,GACA5H,KAAAoC,UACApC,KAAAkI,UAAA,+BAAAN,IAGA5H,KAAAgC,WAAAR,OAAA,EACAxB,KAAAkI,UAAAQ,EAAAd,KAEA9F,EAAA5B,UAAAgI,UAAA,SAAAQ,EAAAd,GACAA,EAAApD,MACAoD,EAAApD,MAAA,KAAAkE,GAEAd,EAAAE,SAAA9H,KAAAoC,UACAwF,EAAAE,OAAAY,GAGAd,EAAA/B,SAAA,IAGA/D,EAAA5B,UAAA6H,SAAA,WAGA,GAAA/H,KAAAmC,gBACA,SAIA,IAAAyF,EAAA5H,KAAAgC,WAAA2G,QACA,QAAAf,IAGA5H,KAAA4I,cAAAhB,IACA,IAEA9F,EAAA5B,UAAA0I,cAAA,SAAAhB,GACA,OAAenJ,OAAAW,EAAA,EAAAX,CAASuB,UAAA,oBACxB,IAAAsI,EAAAD,EAAAJ,EAAA5H,EAAAwI,EACA,OAAmBpK,OAAAW,EAAA,EAAAX,CAAWuB,KAAA,SAAAM,GAC9B,OAAAA,EAAAC,OACA,OAQA,GAPAD,EAAAwI,KAAAzE,MAAA,SAEArE,KAAAwC,iBAAAiB,OACAzD,KAAAmC,iBAAA,EACAnC,KAAA+I,UAAAnB,GACAU,EAAAtI,KAAAgG,gBACAqC,EAAArI,KAAAgJ,gBAAApB,EAAAU,IACAA,IAAAD,EACA,UAAAY,MAAA,uCAEA,OAAAZ,KAAApI,QAAAL,GACA,EAAAyI,EAAAlI,KAAAH,KAAAqD,MADA,KAEA,OACA/C,EAAAI,OACAJ,EAAAC,MAAA,EACA,OAIA,OAHAP,KAAAkJ,aAAAb,EAAAC,EAAAV,IACAA,EAAAuB,4BAAAvB,EAAAwB,4BACAf,IAAAC,GAEA,EAAAtI,KAAAqJ,WAAAhB,EAAAC,EAAAV,KADA,KAEA,OAEA,OADAvH,EAAAC,EAAAI,QACA,KACA,OACAL,GAKA8H,cAAA,EACAC,oBAAA,GAEA9H,EAAAC,MAAA,EACA,OAIA,OAHA0H,EAAA5H,EACAL,KAAAgI,QAAAC,EAAAL,GACA5H,KAAAyC,gBAAAgB,QACA,KACA,OAGA,OAFAoF,EAAAvI,EAAAI,OACAV,KAAAyI,OAAAI,EAAAjB,IACA,KACA,OAGA,OAFA5H,KAAAmC,iBAAA,EACAnC,KAAA+H,YACA,SAKAjG,EAAA5B,UAAA6I,UAAA,SAAAnB,GACA,IAAA0B,EAAAtJ,KAAAqC,MAAAb,OAKA,GAJAoG,EAAArD,KAAAqD,EAAArD,cACAvD,IAAA4G,EAAArD,KAAA9D,WACAmH,EAAArD,KAAA9D,SAAAT,KAAAS,eAEAO,IAAA4G,EAAAtC,WAAA,CACY7G,OAAAc,EAAA,EAAAd,MAAMuC,IAAA4G,EAAA3C,YAAA,gCACNxG,OAAAc,EAAA,EAAAd,MAAMuC,IAAA4G,EAAA1C,YAAA,gCAClB,IAAAmC,EAAArH,KAAAqC,MAAAsF,QAAAC,EAAAtC,YACA,GAAA+B,EAAA,EACA,UAAA4B,MAAA,4BAEArB,EAAA3C,aAAAoC,OAEArG,IAAA4G,EAAA3C,cACA2C,EAAA3C,YAAA,IACA2C,EAAA3C,YAAAqE,EAAA,GAEA1B,EAAA1C,YAAA,IACA0C,EAAA1C,YAAAoE,EAAA1B,EAAA3C,aAEA2C,EAAAwB,0BACAxB,EAAA1C,YAAA,GAAA0C,EAAA3C,YAAA2C,EAAA1C,cAAAoE,GAEA1B,EAAAjD,eAGAiD,EAAAlD,YAAA,GAAAkD,EAAAlD,YAAA4E,KACA1B,EAAAlD,YAAA4E,GAEA1B,EAAAuB,2BAAAvB,EAAAlD,cAAA4E,GAEA,IAAA3E,EAAAiD,EAAAjD,YACA,GAAAA,EAAA,CAGQlG,OAAAc,EAAA,EAAAd,CAAMkG,EAAAnD,OAAA,4BACd,IAAA+H,EAAA5E,EAhhBA6E,IAAA,SAAA3H,GACA,OAAAA,aAAAhC,EACAgC,EAEA,SAAAA,EACAD,EAAAC,SAAA9B,QAEA6B,EAAAC,OAAAb,KACKyI,OAAA,SAAA1C,GAAuB,cAAAA,IAygB5B,OAAAwC,EAAA/H,OACA,UAAAyH,MAAA,2BAGA,QAAAxH,EAAA,EAAAiI,EAAAH,EAA6D9H,EAAAiI,EAAAlI,OAA+BC,IAAA,CAC5F,IAAAP,EAAAwI,EAAAjI,GACAP,EAAAT,SAAAmH,EAAArD,KAAA9D,SACA,IAAAM,EAAAG,EAAAH,IACA,GAAAA,OAAAf,KACA,UAAAiJ,MAAA,sCAEA,GAlnBA,IAknBA/H,EAAAjB,MACA,UAAAgJ,MAAA,uCAGArB,EAAAjD,YAAA4E,IAEAzH,EAAA5B,UAAA8I,gBAAA,SAAApB,EAAAU,GACA,IAAA3D,EAAAiD,EAAAjD,YACA,QAAA3D,IAAA2D,EAGA,OAAAA,IAAAnD,OAAA,GAEA,IAAAyD,EAAA2C,EAAA3C,YACA,QAAAjE,IAAAiE,EAGA,IAFA,IAAA5C,EAAArC,KAAAqC,MACAsH,EAAA1E,EAAA2C,EAAA1C,YACA0E,EAAAvH,EAAAb,OAAA,EAA0CoI,GAAA,EAAQA,IAAA,CAClD,IAAA1I,EAAAmB,EAAAuH,GACA,IAAAA,EAAA3E,GAAA2E,GAAAD,IAAAzI,IAAAoH,EACA,OAAApH,IAMAY,EAAA5B,UAAAgJ,aAAA,SAAAb,EAAAC,EAAAV,GACQnJ,OAAAc,EAAA,EAAAd,CAAM6J,GAAAD,EAAA,8CACN5J,OAAAc,EAAA,EAAAd,CAAMmJ,EAAA/B,QAAA,yBACNpH,OAAAc,EAAA,EAAAd,CAAMmJ,EAAAE,OAAA,wBACd,IAIA+B,EAJAtF,EAAAqD,EAAArD,KACAI,EAAAiD,EAAAjD,YACAM,EAAA2C,EAAA3C,YACAC,EAAA0C,EAAA1C,YAGA,QAAAlE,IAAAiE,QAAAjE,IAAAkE,EAAA,CACYzG,OAAAc,EAAA,EAAAd,CAAMwG,GAAA,qCACNxG,OAAAc,EAAA,EAAAd,CAAMyG,GAAA,qCAClB2E,KACA,QAAAD,EAAA,EAA2BA,EAAA1E,EAAiB0E,IAAA,EAC5C1I,EAAAlB,KAAAqC,MAAAuH,EAAA3E,KACA/D,IAAAmH,GAAAnH,IAAAoH,GACAuB,EAAAxF,KAAAnD,GAIAqD,EAAAqB,UAAArB,EAAAqB,WAAA,OAEA,IAAAkE,EAAA9J,KAAAqC,MAAAb,aACAR,IAAA2D,IAAAnD,OAAA,SACAR,IAAAkE,IAAA,GAEA,GADQzG,OAAAc,EAAA,EAAAd,CAAMqL,GAAA,uCACd,IAAAA,EAEA,MADAC,QAAAC,KAAA,uGAAAhK,UAAAqD,IACA,IAAA4F,MAAA,iDAIA,GAAAtE,EAAA,CAGA,IADA,IAAAE,EAAA+C,EAAAlD,YACAjD,EAAA,EAAAwI,EAAAtF,EAAyDlD,EAAAwI,EAAAzI,OAA2BC,IAAA,CACpF,IAAAP,EAAA+I,EAAAxI,GACAzB,KAAAkK,aAAAhJ,EAAA2D,GACAA,IAEA+C,EAAAuB,6BAEA5E,EAAAqB,UAAArB,EAAAqB,WAAA,WAQA,GAAAiE,KAAArI,OAAA,GACA,QAAAnB,EAAA,EAAA8J,EAAAN,EAA2DxJ,EAAA8J,EAAA3I,OAA4BnB,IAAA,CACvFa,EAAAiJ,EAAA9J,GACgB5B,OAAAiB,EAAA,EAAAjB,CAASyC,EAAAV,QAAehB,EAAA,GACxBf,OAAAiB,EAAA,EAAAjB,CAASyC,EAAAV,QAAehB,EAAA,GACxBf,OAAAiB,EAAA,EAAAjB,CAASyC,EAAAV,QAAehB,EAAA,GAGxC,QAAAc,EAAA,EAAA8J,EAAAP,EAA2DvJ,EAAA8J,EAAA5I,OAA4BlB,IAAA,CACvFY,EAAAkJ,EAAA9J,GACAN,KAAAqK,YAAAnJ,MAIAY,EAAA5B,UAAAmJ,WAAA,SAAAhB,EAAAC,EAAAV,GACA,OAAenJ,OAAAW,EAAA,EAAAX,CAASuB,UAAA,oBACxB,IAAAuE,EAAA+F,EAAA/G,EAAAkD,EAAA8D,EAAAC,EAAArC,EACArC,EAAA9F,KACA,OAAmBvB,OAAAW,EAAA,EAAAX,CAAWuB,KAAA,SAAAK,GAC9B,OAAAA,EAAAE,OACA,OAUA,OATAgE,EAAAqD,EAAArD,KACA+F,EAAA/F,EAAAkG,kBACA,SAAAC,GAA8C,OAAA5E,EAAA6E,MAAAD,QAC9C1J,EACAuC,EAA+B9E,OAAAY,EAAA,EAAAZ,CAAUuB,MACzCyG,EAAA4B,EAAA7H,QACA+J,EAAAjC,KAAA9H,QACAgK,EAAA/L,OAAAuI,QAAuDzD,OAAAqH,WAAA5K,KAAAuH,cAAAc,GAAAwC,OAAA7K,KAAAqD,GAAAyH,iBAAA9K,KAAA+K,WAAAxG,EAAAuG,kBAAyIxL,EAAA,EAAM0L,IAAA,gBAAAV,mBAAAhI,SAAAtC,KAAAsC,UAAqFhD,EAAA,EAAMkE,WAAA,eAAAiD,aACjS8D,aAAkDhG,IAClD,EAA6C9F,OAAAiB,EAAA,EAAAjB,CAAU+L,IACvD,OAEA,OADArC,EAAA9H,EAAAK,OAAAyH,cACA,EAAAnI,KAAAiL,iBAAA9C,EAAAE,EAAAC,EAAA/D,UAKAzC,EAAA5B,UAAA+K,iBAAA,SAAA9C,EAAAE,EAAAC,EAAA/D,GACA,IAAA2G,EAAA/C,EAAAE,EAAAC,EAIA,OAHA4C,GACAlL,KAAAmL,QAAAD,IAGA/C,eACAC,oBAAA,EACAC,eACAC,cACA1C,UAAArB,EAAAqB,YAGA9D,EAAA5B,UAAAgK,aAAA,SAAAhJ,EAAAmG,GACA,IAAAhF,EAAArC,KAAAqC,MACA+I,EAAA/I,EAAAsF,QAAAzG,GACAkK,GAAA,GAGY3M,OAAAc,EAAA,EAAAd,CAAMyC,EAAAH,MAAAf,KAAA,+BAClBqC,EAAAgJ,OAAAhE,EAAA,EAAAhF,EAAAgJ,OAAAD,EAAA,SAGY3M,OAAAc,EAAA,EAAAd,EAAMyC,EAAAH,IAAA,eAGlBG,EAAAH,IAAAf,KAEAqC,EAAAgJ,OAAAhE,EAAA,EAAAnG,KAGAY,EAAA5B,UAAAoF,WAAA,SAAApE,GACQzC,OAAAc,EAAA,EAAAd,CAtwBR,IAswBcyC,EAAAjB,OArwBd,IAqwBciB,EAAAjB,MAAA,4CACd,IAAAoC,EAAArC,KAAAqC,MACAgF,EAAAhF,EAAAsF,QAAAzG,GACQzC,OAAAc,EAAA,EAAAd,CAAM4I,GAAA,oCACdA,GAAA,GACAhF,EAAAgJ,OAAAhE,EAAA,IAGAvF,EAAA5B,UAAAmK,YAAA,SAAAnJ,GACAA,EAAAP,WACAX,KAAAsF,WAAApE,IAKAY,EAAA5B,UAAAiL,QAAA,SAAAG,GAIA,IAAAtL,KAAAoC,UAKA,IAFA,IAAAC,EAAArC,KAAAqC,MACAkJ,EAAAlJ,EAAAsF,QAAA2D,GACA1B,EAAAvH,EAAAb,OAAA,EAAsCoI,GAAA,EAAQA,IAAA,CAC9C,IAAA1I,EAAAmB,EAAAuH,GACApJ,EAAAU,EAAAV,QACAoJ,EAAA2B,GAGgB9M,OAAAiB,EAAA,EAAAjB,CAAS+B,EAAUhB,EAAA,GACnCQ,KAAAqK,YAAAnJ,IAEA0I,EAAA2B,GAGgB9M,OAAAiB,EAAA,EAAAjB,CAAa+B,GAAA,KAI7BsB,EAAA5B,UAAA6D,SAAA,WACA,QAAA/D,KAAA6C,eACA7C,KAAAmC,iBACA,IAAAnC,KAAAgC,WAAAR,QACAxB,KAAAiC,kBACAjC,KAAAuH,iBAEAzF,EAAA5B,UAAA8D,QAAA,WACAhE,KAAAyE,WACAQ,aAAA,EACAC,YAAA,EACAX,MACAqB,UAAA,OACA6E,mBAAA,SAESzJ,IAETc,EAAA5B,UAAA+D,OAAA,SAAAuH,GACAxL,KAAA2K,OACA3K,KAAA2K,MAAAc,aAAAD,IAGA1J,EAAA5B,UAAAgE,MAAA,SAAAwH,EAAAF,EAAAG,GACA,IAAA7F,EAAA9F,KACA,GAAAA,KAAA2K,MAAA,CACA3K,KAAAiC,kBAAA,EACAjC,KAAA2K,MAAAiB,SAAA,WACA9F,EAAA7D,kBAAA,IACgB4J,iBAAA,IAEhB,IAAAC,EAAA,aASAJ,EAKAI,GAAgCrN,OAAAkB,EAAA,EAAAlB,CAAuB,IAAKkB,EAAA,EAAK,SAAYA,EAAA,EAAK,aAAkBA,EAAA,EAAK,SAAYA,EAAA,EAAK,KAAA6L,IAJ1HxL,KAAA2K,MAAAoB,OAAA,kCACAD,GAAgCrN,OAAAkB,EAAA,EAAAlB,CAAuB,IAAKkB,EAAA,EAAK,SAAYA,EAAA,EAAK,SAAYA,EAAA,EAAK,aAAkBA,EAAA,EAAK,KAAA6L,IAK1HxL,KAAA2K,MAAAqB,YAAAN,EAAA,IAAAI,EAAAH,KAGA7J,EAAA5B,UAAA+L,OAAA,WACA,OAAgBxN,OAAAY,EAAA,EAAhB,CAAiB,cAEjBZ,OAAAC,eAAAoD,EAAA5B,UAAA,MACA8K,IAAA,WAA0B,OAAQvM,OAAAY,EAAA,EAAAZ,CAAUuB,OAC5CkM,YAAA,EACAC,cAAA,IAEA1N,OAAAC,eAAAoD,EAAA,YACAkJ,IAAA,WACA,OACAnI,cAAA,uBACAE,MAAA,iBAGAmJ,YAAA,EACAC,cAAA,IAEA1N,OAAAC,eAAAoD,EAAA,SACAkJ,IAAA,WAA0B,oHAC1BkB,YAAA,EACAC,cAAA,IAEArK,EArxBA,GAuxBAsK,EAAA,SAAA/I,EAAAgJ,EAAAvM,EAAAwE,GACA,IAAAvD,EAAAsC,EAAAC,QAAA,WACA,GAAAvC,EACA,eAAAsL,GACA,QAAArL,IAAAlB,EACA,OAAAiB,EAAAsD,KAAAvE,EAAAwE,GAA4DuD,YAAA,SAG5D,YAAAwE,GACA,QAAArL,IAAAlB,EACA,OAAAiB,EAAAiC,QAAAlD,EAAAwE,GAA+DuD,YAAA,SAG/D,YAAAwE,EACA,OAAAtL,EAAAiE,KAA4B6C,YAAA,IAG5B,OAAA5B,QAAAJ,SAAA,IAEA7G,EAAA,WACA,SAAAA,EAAA+C,GACA,IAAA+D,EAAA9F,KACQvB,OAAAY,EAAA,EAAAZ,CAAgBuB,KAAA+B,GAIxB/B,KAAAqM,gBAAA,UACArM,KAAAsM,QAAA,WACA,OAAAF,EAAAtG,EAAAzC,GAAAyC,EAAAuG,gBAAAvG,EAAAhG,UAAAgG,EAAAxB,iBAWA,OARAtF,EAAAkB,UAAA+L,OAAA,WACA,OAAgBxN,OAAAY,EAAA,EAAhB,CAAkBA,EAAA,GAAOiN,QAAAtM,KAAAsM,WAEzB7N,OAAAC,eAAAM,EAAAkB,UAAA,MACA8K,IAAA,WAA0B,OAAQvM,OAAAY,EAAA,EAAAZ,CAAUuB,OAC5CkM,YAAA,EACAC,cAAA,IAEAnN,EApBA,GAsBAC,EAAA,WACA,SAAAA,EAAA8C,GACA,IAAA+D,EAAA9F,KACQvB,OAAAY,EAAA,EAAAZ,CAAgBuB,KAAA+B,GACxB/B,KAAAgF,IAAA,WACA,OAAAoH,EAAAtG,EAAAzC,GAAA,SAcA,OAXApE,EAAAiB,UAAAwD,iBAAA,WACAqG,QAAAC,KAAA,gHAEA/K,EAAAiB,UAAA+L,OAAA,WACA,OAAgBxN,OAAAY,EAAA,EAAhB,CAAkBA,EAAA,GAAOiN,QAAAtM,KAAAgF,OAEzBvG,OAAAC,eAAAO,EAAAiB,UAAA,MACA8K,IAAA,WAA0B,OAAQvM,OAAAY,EAAA,EAAAZ,CAAUuB,OAC5CkM,YAAA,EACAC,cAAA,IAEAlN,EAnBA,GAqBAC,EAAA,WACA,SAAAA,EAAA6C,GACA,IAAA+D,EAAA9F,KACQvB,OAAAY,EAAA,EAAAZ,CAAgBuB,KAAA+B,GACxB/B,KAAAqE,KAAA,WACA,OAAA+H,EAAAtG,EAAAzC,GAAA,UAAAyC,EAAAhG,UAAAgG,EAAAxB,iBAcA,OAXApF,EAAAgB,UAAAwD,iBAAA,WACAqG,QAAAC,KAAA,6IAEA9K,EAAAgB,UAAA+L,OAAA,WACA,OAAgBxN,OAAAY,EAAA,EAAhB,CAAkBA,EAAA,GAAOiN,QAAAtM,KAAAqE,QAEzB5F,OAAAC,eAAAQ,EAAAgB,UAAA,MACA8K,IAAA,WAA0B,OAAQvM,OAAAY,EAAA,EAAAZ,CAAUuB,OAC5CkM,YAAA,EACAC,cAAA,IAEAjN,EAnBA,GAqBAC,EAAA,WACA,SAAAA,EAAA4C,GACA,IAAA+D,EAAA9F,KACQvB,OAAAY,EAAA,EAAAZ,CAAgBuB,KAAA+B,GACxB/B,KAAAgD,QAAA,WACA,OAAAoJ,EAAAtG,EAAAzC,GAAA,OAAAyC,EAAAhG,UAAAgG,EAAAxB,iBAcA,OAXAnF,EAAAe,UAAAwD,iBAAA,WACAqG,QAAAC,KAAA,4KAEA7K,EAAAe,UAAA+L,OAAA,WACA,OAAgBxN,OAAAY,EAAA,EAAhB,CAAkBA,EAAA,GAAOiN,QAAAtM,KAAAgD,WAEzBvE,OAAAC,eAAAS,EAAAe,UAAA,MACA8K,IAAA,WAA0B,OAAQvM,OAAAY,EAAA,EAAAZ,CAAUuB,OAC5CkM,YAAA,EACAC,cAAA,IAEAhN,EAnBA","file":"static/js/41.7b3ab20d9c43c2c94288.js","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, c as createEvent, d as getIonMode, h, e as getElement, H as Host } from './core-ca0488fc.js';\nimport { b as config } from './config-3c7f3790.js';\nimport { b as assert } from './helpers-46f4a262.js';\nimport { d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './constants-3c3e1099.js';\nimport { a as attachComponent } from './framework-delegate-c2e2e1f4.js';\nimport { l as lifecycle, t as transition, s as setPageHidden } from './index-6826f2f6.js';\nimport { g as getTimeGivenProgression, P as Point } from './cubic-bezier-2812fda3.js';\nvar VIEW_STATE_NEW = 1;\nvar VIEW_STATE_ATTACHED = 2;\nvar VIEW_STATE_DESTROYED = 3;\nvar ViewController = /** @class */ (function () {\n    function ViewController(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    ViewController.prototype.init = function (container) {\n        return __awaiter(this, void 0, void 0, function () {\n            var component, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.state = VIEW_STATE_ATTACHED;\n                        if (!!this.element) return [3 /*break*/, 2];\n                        component = this.component;\n                        _a = this;\n                        return [4 /*yield*/, attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params)];\n                    case 1:\n                        _a.element = _b.sent();\n                        _b.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * DOM WRITE\n     */\n    ViewController.prototype._destroy = function () {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        var element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    };\n    return ViewController;\n}());\nvar matches = function (view, id, params) {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    var currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    var keysA = Object.keys(currentParams);\n    var keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (var _i = 0, keysA_1 = keysA; _i < keysA_1.length; _i++) {\n        var key = keysA_1[_i];\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nvar convertToView = function (page, params) {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nvar convertToViews = function (pages) {\n    return pages.map(function (page) {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(function (v) { return v !== null; });\n};\nvar Nav = /** @class */ (function () {\n    function class_1(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    class_1.prototype.swipeGestureChanged = function () {\n        if (this.gesture) {\n            this.gesture.setDisabled(this.swipeGesture !== true);\n        }\n    };\n    class_1.prototype.rootChanged = function () {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    };\n    class_1.prototype.componentWillLoad = function () {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            var mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    };\n    class_1.prototype.componentDidLoad = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this.rootChanged();\n                        _a = this;\n                        return [4 /*yield*/, import('./swipe-back-35ad8e37.js')];\n                    case 1:\n                        _a.gesture = (_b.sent()).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n                        this.swipeGestureChanged();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.componentDidUnload = function () {\n        for (var _i = 0, _a = this.views; _i < _a.length; _i++) {\n            var view = _a[_i];\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    };\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.push = function (component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts: opts\n        }, done);\n    };\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.insert = function (insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts: opts\n        }, done);\n    };\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.insertPages = function (insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.pop = function (opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.popTo = function (indexOrViewCtrl, opts, done) {\n        var tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts: opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    };\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.popToRoot = function (opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.removeIndex = function (startIndex, removeCount, opts, done) {\n        if (removeCount === void 0) { removeCount = 1; }\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount: removeCount,\n            opts: opts\n        }, done);\n    };\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.setRoot = function (component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    };\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    class_1.prototype.setPages = function (views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts: opts\n        }, done);\n    };\n    /** @internal */\n    class_1.prototype.setRouteId = function (id, params, direction) {\n        var _this = this;\n        var active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        var resolve;\n        var promise = new Promise(function (r) { return (resolve = r); });\n        var finish;\n        var commonOpts = {\n            updateURL: false,\n            viewIsReady: function (enteringEl) {\n                var mark;\n                var p = new Promise(function (r) { return (mark = r); });\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: function () { return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    mark();\n                                    return [4 /*yield*/, finish];\n                                case 1:\n                                    _a.sent();\n                                    return [2 /*return*/];\n                            }\n                        });\n                    }); }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            var viewController = this.views.find(function (v) { return matches(v, id, params); });\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    };\n    /** @internal */\n    class_1.prototype.getRouteId = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var active;\n            return __generator(this, function (_a) {\n                active = this.getActiveSync();\n                return [2 /*return*/, active\n                        ? {\n                            id: active.element.tagName,\n                            params: active.params,\n                            element: active.element\n                        }\n                        : undefined];\n            });\n        });\n    };\n    /**\n     * Get the active view.\n     */\n    class_1.prototype.getActive = function () {\n        return Promise.resolve(this.getActiveSync());\n    };\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    class_1.prototype.getByIndex = function (index) {\n        return Promise.resolve(this.views[index]);\n    };\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    class_1.prototype.canGoBack = function (view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    };\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    class_1.prototype.getPrevious = function (view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    };\n    class_1.prototype.getLength = function () {\n        return this.views.length;\n    };\n    class_1.prototype.getActiveSync = function () {\n        return this.views[this.views.length - 1];\n    };\n    class_1.prototype.canGoBackSync = function (view) {\n        if (view === void 0) { view = this.getActiveSync(); }\n        return !!(view && this.getPreviousSync(view));\n    };\n    class_1.prototype.getPreviousSync = function (view) {\n        if (view === void 0) { view = this.getActiveSync(); }\n        if (!view) {\n            return undefined;\n        }\n        var views = this.views;\n        var index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    };\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    class_1.prototype.queueTrns = function (ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        var promise = new Promise(function (resolve, reject) {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    };\n    class_1.prototype.success = function (result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            var router = document.querySelector('ion-router');\n            if (router) {\n                var direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    };\n    class_1.prototype.failed = function (rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    };\n    class_1.prototype.fireError = function (rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    };\n    class_1.prototype.nextTrns = function () {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        var ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    };\n    class_1.prototype.runTransition = function (ti) {\n        return __awaiter(this, void 0, void 0, function () {\n            var leavingView, enteringView, requiresTransition, result, _a, rejectReason_1;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 6, , 7]);\n                        // set that this nav is actively transitioning\n                        this.ionNavWillChange.emit();\n                        this.isTransitioning = true;\n                        this.prepareTI(ti);\n                        leavingView = this.getActiveSync();\n                        enteringView = this.getEnteringView(ti, leavingView);\n                        if (!leavingView && !enteringView) {\n                            throw new Error('no views in the stack to be removed');\n                        }\n                        if (!(enteringView && enteringView.state === VIEW_STATE_NEW)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, enteringView.init(this.el)];\n                    case 1:\n                        _b.sent();\n                        _b.label = 2;\n                    case 2:\n                        this.postViewInit(enteringView, leavingView, ti);\n                        requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                            enteringView !== leavingView;\n                        if (!requiresTransition) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.transition(enteringView, leavingView, ti)];\n                    case 3:\n                        _a = _b.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        _a = {\n                            // transition is not required, so we are already done!\n                            // they're inserting/removing the views somewhere in the middle or\n                            // beginning, so visually nothing needs to animate/transition\n                            // resolve immediately because there's no animation that's happening\n                            hasCompleted: true,\n                            requiresTransition: false\n                        };\n                        _b.label = 5;\n                    case 5:\n                        result = _a;\n                        this.success(result, ti);\n                        this.ionNavDidChange.emit();\n                        return [3 /*break*/, 7];\n                    case 6:\n                        rejectReason_1 = _b.sent();\n                        this.failed(rejectReason_1, ti);\n                        return [3 /*break*/, 7];\n                    case 7:\n                        this.isTransitioning = false;\n                        this.nextTrns();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.prepareTI = function (ti) {\n        var viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            var index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        var insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        var viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (var _i = 0, viewControllers_1 = viewControllers; _i < viewControllers_1.length; _i++) {\n            var view = viewControllers_1[_i];\n            view.delegate = ti.opts.delegate;\n            var nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    };\n    class_1.prototype.getEnteringView = function (ti, leavingView) {\n        var insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        var removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            var views = this.views;\n            var removeEnd = removeStart + ti.removeCount;\n            for (var i = views.length - 1; i >= 0; i--) {\n                var view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    };\n    class_1.prototype.postViewInit = function (enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        var opts = ti.opts;\n        var insertViews = ti.insertViews;\n        var removeStart = ti.removeStart;\n        var removeCount = ti.removeCount;\n        var destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (var i = 0; i < removeCount; i++) {\n                var view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        var finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(\"You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.\", this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            var insertIndex = ti.insertStart;\n            for (var _i = 0, insertViews_1 = insertViews; _i < insertViews_1.length; _i++) {\n                var view = insertViews_1[_i];\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (var _a = 0, destroyQueue_1 = destroyQueue; _a < destroyQueue_1.length; _a++) {\n                var view = destroyQueue_1[_a];\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (var _b = 0, destroyQueue_2 = destroyQueue; _b < destroyQueue_2.length; _b++) {\n                var view = destroyQueue_2[_b];\n                this.destroyView(view);\n            }\n        }\n    };\n    class_1.prototype.transition = function (enteringView, leavingView, ti) {\n        return __awaiter(this, void 0, void 0, function () {\n            var opts, progressCallback, mode, enteringEl, leavingEl, animationOpts, hasCompleted;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        opts = ti.opts;\n                        progressCallback = opts.progressAnimation\n                            ? function (ani) { return _this.sbAni = ani; }\n                            : undefined;\n                        mode = getIonMode(this);\n                        enteringEl = enteringView.element;\n                        leavingEl = leavingView && leavingView.element;\n                        animationOpts = Object.assign({ mode: mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback: progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl: enteringEl,\n                            leavingEl: leavingEl }, opts);\n                        return [4 /*yield*/, transition(animationOpts)];\n                    case 1:\n                        hasCompleted = (_a.sent()).hasCompleted;\n                        return [2 /*return*/, this.transitionFinish(hasCompleted, enteringView, leavingView, opts)];\n                }\n            });\n        });\n    };\n    class_1.prototype.transitionFinish = function (hasCompleted, enteringView, leavingView, opts) {\n        var cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted: hasCompleted,\n            requiresTransition: true,\n            enteringView: enteringView,\n            leavingView: leavingView,\n            direction: opts.direction\n        };\n    };\n    class_1.prototype.insertViewAt = function (view, index) {\n        var views = this.views;\n        var existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    };\n    class_1.prototype.removeView = function (view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        var views = this.views;\n        var index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    };\n    class_1.prototype.destroyView = function (view) {\n        view._destroy();\n        this.removeView(view);\n    };\n    /**\n     * DOM WRITE\n     */\n    class_1.prototype.cleanup = function (activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        var views = this.views;\n        var activeViewIndex = views.indexOf(activeView);\n        for (var i = views.length - 1; i >= 0; i--) {\n            var view = views[i];\n            var element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    };\n    class_1.prototype.canStart = function () {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    };\n    class_1.prototype.onStart = function () {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    };\n    class_1.prototype.onMove = function (stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    };\n    class_1.prototype.onEnd = function (shouldComplete, stepValue, dur) {\n        var _this = this;\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(function () {\n                _this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            var newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(1, 0), new Point(0.68, 0.28), new Point(1, 1), stepValue);\n            }\n            else {\n                newStepValue += getTimeGivenProgression(new Point(0, 0), new Point(0.32, 0.72), new Point(0, 1), new Point(1, 1), stepValue);\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    };\n    class_1.prototype.render = function () {\n        return (h(\"slot\", null));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"watchers\", {\n        get: function () {\n            return {\n                \"swipeGesture\": [\"swipeGestureChanged\"],\n                \"root\": [\"rootChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"style\", {\n        get: function () { return \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return class_1;\n}());\nvar navLink = function (el, routerDirection, component, componentProps) {\n    var nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\nvar NavLink = /** @class */ (function () {\n    function NavLink(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = function () {\n            return navLink(_this.el, _this.routerDirection, _this.component, _this.componentProps);\n        };\n    }\n    NavLink.prototype.render = function () {\n        return (h(Host, { onClick: this.onClick }));\n    };\n    Object.defineProperty(NavLink.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    return NavLink;\n}());\nvar NavPop = /** @class */ (function () {\n    function NavPop(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.pop = function () {\n            return navLink(_this.el, 'back');\n        };\n    }\n    NavPop.prototype.componentDidLoad = function () {\n        console.warn('[DEPRECATED][ion-nav-pop] <ion-nav-pop> is deprecated. Use `<ion-nav-link routerDirection=\"back\">` instead.');\n    };\n    NavPop.prototype.render = function () {\n        return (h(Host, { onClick: this.pop }));\n    };\n    Object.defineProperty(NavPop.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    return NavPop;\n}());\nvar NavPush = /** @class */ (function () {\n    function NavPush(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.push = function () {\n            return navLink(_this.el, 'forward', _this.component, _this.componentProps);\n        };\n    }\n    NavPush.prototype.componentDidLoad = function () {\n        console.warn('[DEPRECATED][ion-nav-push] `<ion-nav-push component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\">` instead.');\n    };\n    NavPush.prototype.render = function () {\n        return (h(Host, { onClick: this.push }));\n    };\n    Object.defineProperty(NavPush.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    return NavPush;\n}());\nvar NavSetRoot = /** @class */ (function () {\n    function NavSetRoot(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.setRoot = function () {\n            return navLink(_this.el, 'root', _this.component, _this.componentProps);\n        };\n    }\n    NavSetRoot.prototype.componentDidLoad = function () {\n        console.warn('[DEPRECATED][ion-nav-set-root] `<ion-nav-set-root component=\"MyComponent\">` is deprecated. Use `<ion-nav-link component=\"MyComponent\" routerDirection=\"root\">` instead.');\n    };\n    NavSetRoot.prototype.render = function () {\n        return (h(Host, { onClick: this.setRoot }));\n    };\n    Object.defineProperty(NavSetRoot.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    return NavSetRoot;\n}());\nexport { Nav as ion_nav, NavLink as ion_nav_link, NavPop as ion_nav_pop, NavPush as ion_nav_push, NavSetRoot as ion_nav_set_root };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/core/dist/esm-es5/ion-nav_5.entry.js\n// module id = 6NC4\n// module chunks = 41"],"sourceRoot":""}