{"version":3,"sources":["webpack:///./node_modules/@ionic/core/dist/esm-es5/ion-virtual-scroll.entry.js"],"names":["Object","defineProperty","__webpack_exports__","value","__webpack_require__","d","VirtualScroll","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__core_ca0488fc_js__","createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","offset","len","cells","end","i","item","push","index","height","reads","visible","class_1","hostRef","_this","this","range","length","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","prototype","itemsChanged","connectedCallback","contentEl","_a","_b","label","closest","getScrollElement","console","error","scrollEl","sent","updateState","componentDidUpdate","disconnectedCallback","undefined","onResize","positionForItem","Promise","resolve","heightIndex","cell","find","c","positionForIndex","getHeightIndex","checkRange","cellIndex","max","findIndex","findCellIndex","dst","src","inplaceUpdate","Math","scheduleUpdate","checkEnd","timerUpdate","clearTimeout","readVS","bind","writeVS","topOffset","node","offsetTop","parentElement","offsetHeight","scrollTop","dirtyIndex","viewport","vierportHeight","margin","top","bottom","getViewport","buffer","topPos","bottomPos","min","getRange","currentRange","getShouldUpdate","dom","_i","dom_1","change","toMutate","_loop_1","n","pool","filter","_loop_2","toMutate_1","forEach","updateVDom","nodeRender","updateCellHeight","child","Array","from","tagName","childrenNu","newChild","classList","add","appendChild","style","transform","remove","doRender","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","calcHeightIndex","buf","Uint32Array","newBuf","set","subarray","resizeBuffer","acum","shouldListen","rmEvent","addEventListener","removeEventListener","renderVirtualNode","renderHeader","renderFooter","render","VirtualProxy","map","get","enumerable","configurable","utils","vattrs","classes","class","assign"],"mappings":"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","file":"static/js/5.4a1549879ef64463406e.js","sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { r as registerInstance, f as readTask, w as writeTask, h, H as Host, e as getElement } from './core-ca0488fc.js';\nimport './config-3c7f3790.js';\nvar CELL_TYPE_ITEM = 'item';\nvar CELL_TYPE_HEADER = 'header';\nvar CELL_TYPE_FOOTER = 'footer';\nvar NODE_CHANGE_NONE = 0;\nvar NODE_CHANGE_POSITION = 1;\nvar NODE_CHANGE_CELL = 2;\nvar MIN_READS = 2;\nvar updateVDom = function (dom, heightIndex, cells, range) {\n    // reset dom\n    for (var _i = 0, dom_1 = dom; _i < dom_1.length; _i++) {\n        var node = dom_1[_i];\n        node.change = NODE_CHANGE_NONE;\n        node.d = true;\n    }\n    // try to match into exisiting dom\n    var toMutate = [];\n    var end = range.offset + range.length;\n    var _loop_1 = function (i) {\n        var cell = cells[i];\n        var node = dom.find(function (n) { return n.d && n.cell === cell; });\n        if (node) {\n            var top = heightIndex[i];\n            if (top !== node.top) {\n                node.top = top;\n                node.change = NODE_CHANGE_POSITION;\n            }\n            node.d = false;\n        }\n        else {\n            toMutate.push(cell);\n        }\n    };\n    for (var i = range.offset; i < end; i++) {\n        _loop_1(i);\n    }\n    // needs to append\n    var pool = dom.filter(function (n) { return n.d; });\n    var _loop_2 = function (cell) {\n        var node = pool.find(function (n) { return n.d && n.cell.type === cell.type; });\n        var index = cell.i;\n        if (node) {\n            node.d = false;\n            node.change = NODE_CHANGE_CELL;\n            node.cell = cell;\n            node.top = heightIndex[index];\n        }\n        else {\n            dom.push({\n                d: false,\n                cell: cell,\n                visible: true,\n                change: NODE_CHANGE_CELL,\n                top: heightIndex[index],\n            });\n        }\n    };\n    for (var _a = 0, toMutate_1 = toMutate; _a < toMutate_1.length; _a++) {\n        var cell = toMutate_1[_a];\n        _loop_2(cell);\n    }\n    dom\n        .filter(function (n) { return n.d && n.top !== -9999; })\n        .forEach(function (n) {\n        n.change = NODE_CHANGE_POSITION;\n        n.top = -9999;\n    });\n};\nvar doRender = function (el, nodeRender, dom, updateCellHeight) {\n    var children = Array.from(el.children).filter(function (n) { return n.tagName !== 'TEMPLATE'; });\n    var childrenNu = children.length;\n    var child;\n    for (var i = 0; i < dom.length; i++) {\n        var node = dom[i];\n        var cell = node.cell;\n        // the cell change, the content must be updated\n        if (node.change === NODE_CHANGE_CELL) {\n            if (i < childrenNu) {\n                child = children[i];\n                nodeRender(child, cell, i);\n            }\n            else {\n                var newChild = createNode(el, cell.type);\n                child = nodeRender(newChild, cell, i) || newChild;\n                child.classList.add('virtual-item');\n                el.appendChild(child);\n            }\n            child['$ionCell'] = cell;\n        }\n        else {\n            child = children[i];\n        }\n        // only update position when it changes\n        if (node.change !== NODE_CHANGE_NONE) {\n            child.style.transform = \"translate3d(0,\" + node.top + \"px,0)\";\n        }\n        // update visibility\n        var visible = cell.visible;\n        if (node.visible !== visible) {\n            if (visible) {\n                child.classList.remove('virtual-loading');\n            }\n            else {\n                child.classList.add('virtual-loading');\n            }\n            node.visible = visible;\n        }\n        // dynamic height\n        if (cell.reads > 0) {\n            updateCellHeight(cell, child);\n            cell.reads--;\n        }\n    }\n};\nvar createNode = function (el, type) {\n    var template = getTemplate(el, type);\n    if (template && el.ownerDocument) {\n        return el.ownerDocument.importNode(template.content, true).children[0];\n    }\n    return null;\n};\nvar getTemplate = function (el, type) {\n    switch (type) {\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n    }\n};\nvar getViewport = function (scrollTop, vierportHeight, margin) {\n    return {\n        top: Math.max(scrollTop - margin, 0),\n        bottom: scrollTop + vierportHeight + margin\n    };\n};\nvar getRange = function (heightIndex, viewport, buffer) {\n    var topPos = viewport.top;\n    var bottomPos = viewport.bottom;\n    // find top index\n    var i = 0;\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] > topPos) {\n            break;\n        }\n    }\n    var offset = Math.max(i - buffer - 1, 0);\n    // find bottom index\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] >= bottomPos) {\n            break;\n        }\n    }\n    var end = Math.min(i + buffer, heightIndex.length);\n    var length = end - offset;\n    return { offset: offset, length: length };\n};\nvar getShouldUpdate = function (dirtyIndex, currentRange, range) {\n    var end = range.offset + range.length;\n    return (dirtyIndex <= end ||\n        currentRange.offset !== range.offset ||\n        currentRange.length !== range.length);\n};\nvar findCellIndex = function (cells, index) {\n    var max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n    if (index === 0) {\n        return 0;\n    }\n    else if (index === max + 1) {\n        return cells.length;\n    }\n    else {\n        return cells.findIndex(function (c) { return c.index === index; });\n    }\n};\nvar inplaceUpdate = function (dst, src, offset) {\n    if (offset === 0 && src.length >= dst.length) {\n        return src;\n    }\n    for (var i = 0; i < src.length; i++) {\n        dst[i + offset] = src[i];\n    }\n    return dst;\n};\nvar calcCells = function (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) {\n    var cells = [];\n    var end = len + offset;\n    for (var i = offset; i < end; i++) {\n        var item = items[i];\n        if (headerFn) {\n            var value = headerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_HEADER,\n                    value: value,\n                    index: i,\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n                    reads: headerHeight ? 0 : MIN_READS,\n                    visible: !!headerHeight,\n                });\n            }\n        }\n        cells.push({\n            i: j++,\n            type: CELL_TYPE_ITEM,\n            value: item,\n            index: i,\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n            reads: itemHeight ? 0 : MIN_READS,\n            visible: !!itemHeight,\n        });\n        if (footerFn) {\n            var value = footerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_FOOTER,\n                    value: value,\n                    index: i,\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n                    reads: footerHeight ? 0 : MIN_READS,\n                    visible: !!footerHeight,\n                });\n            }\n        }\n    }\n    return cells;\n};\nvar calcHeightIndex = function (buf, cells, index) {\n    var acum = buf[index];\n    for (var i = index; i < buf.length; i++) {\n        buf[i] = acum;\n        acum += cells[i].height;\n    }\n    return acum;\n};\nvar resizeBuffer = function (buf, len) {\n    if (!buf) {\n        return new Uint32Array(len);\n    }\n    if (buf.length === len) {\n        return buf;\n    }\n    else if (len > buf.length) {\n        var newBuf = new Uint32Array(len);\n        newBuf.set(buf);\n        return newBuf;\n    }\n    else {\n        return buf.subarray(0, len);\n    }\n};\nvar positionForIndex = function (index, cells, heightIndex) {\n    var cell = cells.find(function (c) { return c.type === CELL_TYPE_ITEM && c.index === index; });\n    if (cell) {\n        return heightIndex[cell.i];\n    }\n    return -1;\n};\nvar VirtualScroll = /** @class */ (function () {\n    function class_1(hostRef) {\n        var _this = this;\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = function () {\n            _this.updateVirtualScroll();\n        };\n    }\n    class_1.prototype.itemsChanged = function () {\n        this.calcCells();\n        this.updateVirtualScroll();\n    };\n    class_1.prototype.connectedCallback = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var contentEl, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        contentEl = this.el.closest('ion-content');\n                        if (!contentEl) {\n                            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n                            return [2 /*return*/];\n                        }\n                        _a = this;\n                        return [4 /*yield*/, contentEl.getScrollElement()];\n                    case 1:\n                        _a.scrollEl = _b.sent();\n                        this.contentEl = contentEl;\n                        this.calcCells();\n                        this.updateState();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    class_1.prototype.componentDidUpdate = function () {\n        this.updateState();\n    };\n    class_1.prototype.disconnectedCallback = function () {\n        this.scrollEl = undefined;\n    };\n    class_1.prototype.onResize = function () {\n        this.calcCells();\n        this.updateVirtualScroll();\n    };\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    class_1.prototype.positionForItem = function (index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    };\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    class_1.prototype.checkRange = function (offset, len) {\n        if (len === void 0) { len = -1; }\n        return __awaiter(this, void 0, void 0, function () {\n            var length, cellIndex, cells;\n            return __generator(this, function (_a) {\n                // TODO: kind of hacky how we do in-place updated of the cells\n                // array. this part needs a complete refactor\n                if (!this.items) {\n                    return [2 /*return*/];\n                }\n                length = (len === -1)\n                    ? this.items.length - offset\n                    : len;\n                cellIndex = findCellIndex(this.cells, offset);\n                cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n                this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n                this.lastItemLen = this.items.length;\n                this.indexDirty = Math.max(offset - 1, 0);\n                this.scheduleUpdate();\n                return [2 /*return*/];\n            });\n        });\n    };\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    class_1.prototype.checkEnd = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (this.items) {\n                    this.checkRange(this.lastItemLen);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    class_1.prototype.updateVirtualScroll = function () {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    };\n    class_1.prototype.readVS = function () {\n        var _a = this, contentEl = _a.contentEl, scrollEl = _a.scrollEl, el = _a.el;\n        var topOffset = 0;\n        var node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    };\n    class_1.prototype.writeVS = function () {\n        var dirtyIndex = this.indexDirty;\n        // get visible viewport\n        var scrollTop = this.currentScrollTop - this.viewportOffset;\n        var viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        var heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        var range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        var shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            this.el.forceUpdate();\n        }\n    };\n    class_1.prototype.updateCellHeight = function (cell, node) {\n        var _this = this;\n        var update = function () {\n            if (node['$ionCell'] === cell) {\n                var style = window.getComputedStyle(node);\n                var height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                _this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    };\n    class_1.prototype.setCellHeight = function (cell, height) {\n        var index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    };\n    class_1.prototype.scheduleUpdate = function () {\n        var _this = this;\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(function () { return _this.updateVirtualScroll(); }, 100);\n    };\n    class_1.prototype.updateState = function () {\n        var shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    };\n    class_1.prototype.calcCells = function () {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    };\n    class_1.prototype.getHeightIndex = function () {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    };\n    class_1.prototype.calcHeightIndex = function (index) {\n        if (index === void 0) { index = 0; }\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    };\n    class_1.prototype.enableScrollEvents = function (shouldListen) {\n        var _this = this;\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        var scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = function () {\n                scrollEl.removeEventListener('scroll', _this.onScroll);\n            };\n        }\n    };\n    class_1.prototype.renderVirtualNode = function (node) {\n        var _a = node.cell, type = _a.type, value = _a.value, index = _a.index;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    };\n    class_1.prototype.render = function () {\n        var _this = this;\n        return (h(Host, { style: {\n                height: this.totalHeight + \"px\"\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(function (node) { return _this.renderVirtualNode(node); })))));\n    };\n    Object.defineProperty(class_1.prototype, \"el\", {\n        get: function () { return getElement(this); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"watchers\", {\n        get: function () {\n            return {\n                \"itemHeight\": [\"itemsChanged\"],\n                \"headerHeight\": [\"itemsChanged\"],\n                \"footerHeight\": [\"itemsChanged\"],\n                \"items\": [\"itemsChanged\"]\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(class_1, \"style\", {\n        get: function () { return \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute!important;top:0!important;right:0!important;left:0!important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\"; },\n        enumerable: true,\n        configurable: true\n    });\n    return class_1;\n}());\nvar VirtualProxy = function (_a, children, utils) {\n    var dom = _a.dom;\n    return utils.map(children, function (child, i) {\n        var node = dom[i];\n        var vattrs = child.vattrs || {};\n        var classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: \"translate3d(0,\" + node.top + \"px,0)\" }) }) });\n    });\n};\nexport { VirtualScroll as ion_virtual_scroll };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@ionic/core/dist/esm-es5/ion-virtual-scroll.entry.js\n// module id = 1h3x\n// module chunks = 5"],"sourceRoot":""}